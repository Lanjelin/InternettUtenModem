<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title>WWW Security FAQ: Client Side Security</title>
</head>

<body>
<H1>The World Wide Web Security FAQ</H1>
<HR>
<ul>
  <li><A HREF="WWW-SE~1.HTM#contents" tppabs="http://www.austria.eu.net/www-security-faq/www-security-faq.html#contents">Up to Table of contents</A>
  <li><A HREF="WWWSF6~2.HTM" tppabs="http://www.austria.eu.net/www-security-faq/wwwsf6.html">Backward to <cite>Server Logs and Privacy</cite></a>
  <li><A HREF="WWWSF8~2.HTM" tppabs="http://www.austria.eu.net/www-security-faq/wwwsf8.html">Forward to <cite>Specific Servers</cite></a>
</ul>
<HR>

<H1><A NAME="clients">9. Client Side Security</A></H1>

(Thanks to <A HREF="mailto:pearlman@rand.org">Laura Pearlman</A>,
who contributed many of the Q&A's in this section).

<H2><A NAME="Q53">Q53: Someone suggested I configure /bin/csh as a viewer
for documents of type application/x-csh.  Is this a good idea?</A></H2>

This is not a good idea.  Configuring any command-line shell,
interpreter, macro processor, of scripting language processor as the
"viewer" for a document type leaves you vulnerable to attack over the
Web.  You should never blindly execute any program you download from
the Internet (including programs obtained by FTP).  It is safer to
download a script as text, look it over to make sure it isn't doing
anything malicious, and then run it by hand.

<p>
These words of warning apply also to the macro worksheets generated by
popular PC spreadsheet programs.  Although it seems natural to declare
a type "application/x-msexcel-macro" in order to receive spreadsheets
that automatically recalculate themselves, some of the functions in
the Excel macro language have the potential to inflict damage on other
worksheets and files.  These warnings even apply to such seemingly innocuous
things as word processor style sheets and template files!  Many high end word
processors have a built-in macro processing
ability.  An example of the way in which word processing macros can be
misused is the Microsoft Word <A
HREF="tppmsgs/msgs6.htm#614" tppabs="http://www.research.ibm.com/xw-D953-wconc">
"prank macro"</A>, which has the ability to spread, virus-like, from
document to document.
<p>
I have heard of at least one individual who decided he'd only be using
the C-shell to download scripts written by himself and other trusted
parties.  He screened all URLs by hand to make sure they didn't end
with a <CODE>.csh</CODE> extension before downloading them.
Unfortunately the file extension is not a reliable way to determine
what a URL contains.  The type of a document is determined by the Web
(HTTP) server, not the browser, and a document of type application/x-csh
can just as easily have an extension of <CODE>.txt</CODE> or no
extension at all.

<p>
In short, beware of declaring an external viewer for any file that contains
executable statements.
<p>
This security problem is addressed by scripting languages as <A
HREF="tppmsgs/msgs6.htm#643" tppabs="http://java.sun.com/">Java</A> and
<A HREF="tppmsgs/msgs6.htm#644" tppabs="http://www.sunlabs.com/research/tcl/">Safe Tcl</A> in which
dangerous functions can be disabled.  There's even a prototype
<A HREF="tppmsgs/msgs6.htm#645" tppabs="ftp://ftp.ox.ac.uk/pub/perl/README.Safe">"Safe Perl"</A> that
can be used as a safer external viewer for perl programs.

<HR>

<H2><A NAME="Q54">Q54: Is there anything else I should keep in mind
regarding external viewers?</A></H2>

Yes.  Whenever you upgrade a program that you've configured as an
external viewer you should think about the issues related in <A
HREF="#Q53">Q53</A> in light of the program's new features.  For
example, if the viewer is a word processor, and the new version has
just added scripting/macro features, is there any chance that loading and
displaying the document could automatically launch a script?

<HR>

<H2><A NAME="Q55">Q55: How do I turn off the "You are submitting the contents of a form
insecurely" message in Netscape?  Should I worry about it?</A></H2>

This message indicates that the contents of a form that you're
submitting to a CGI script is not encrypted and could be intercepted.
Right now you'll get this message whenever you submit a form to any
non-Netscape server, since only the Netsite Commerce Server can handle
encrypted forms.  You probably shouldn't send sensitive information
such as credit card numbers via unencrypted forms (however if you're
the type who reads his credit card number over cellular phones, an
even more insecure means of communication, go right ahead!).

<p>
To turn this warning off, select Preferences from Netscape's Options
menu, choose "Images and Security", and uncheck the checkbox labeled
"Warn before submitting forms insecurely."

<HR>

<H2><A NAME="Q56">Q56</A> How secure is the encryption used by SSL?</H2>

SSL uses public-key encryption to exchange a session key between the
client and server; this session key is used to encrypt the http
transaction (both request and response).  Each transaction uses a
different session key so that if someone manages to decrypt a
transaction, that does not mean that they've found the server's secret
key; if they want to decrypt another transaction, they'll need to
spend as much time and effort on the second transaction as they did on
the first.
<p>
Netscape servers and browsers do encryption using either a 40-bit
secret key or a 128-bit secret key.  Many people feel that using a
40-bit key is insecure because it's vulnerable to a "brute force"
attack (trying each of the 2^40 possible keys until you find the one
that decrypts the message).  Using a 128-bit key eleiminates this
problem because there are 2^128 instead of 2^40 possible keys.
Unfortunately, most Netscape users have browsers that support only
40-bit secret keys.  This is because of legal restrictions on the
encryption software that can be exported from the United States
(The Federal Government has recently modified this policy on
following the well-publicized cracking of a Netscape message
encrypted using a 40-bit key.  Expect this situation to change).
<p>
In Netscape you can tell what kind of encryption is in use for a
particular document by looking at the "document" information" screen
accessible from the file menu.  The little key in the lower left-hand
corner of the Netscape window also indicates this information.  A
solid key with two teeth means 128-bit encryption, a solid key with
one tooth means 40-bit encryption, and a broken key means no
encryption.  Even if your browser supports 128-bit encryption, it
may use 40-bit encryption when talking to older Netscape servers or
Netscape servers outside the U.S. and Canada.

<HR>

<H2><A NAME="Q57">Q57</A> My Netscape browser is displaying a form
for ordering merchandise from a department store that I trust.  The
little key at the lower left-hand corner of the Netscape window is
solid and has two teeth.  This means I can safely submit my credit
card number, right?</H2>

Not quite.  A solid key with two teeth appears indicates
that SSL is being used with a 128-bit secret key and that the remote
host owns a valid server certificate that was certified by some
authority that Netscape recognizes.  At this point, however, you don't
know who that certificate belongs to.  It's possible that someone has
bought or stolen a server certificate and then diverted network
traffic destined for the department store by subverting a router
somewhere between you and the store.  The only way to make sure that
you're talking to the company you think you're talking to is to open
up the "Document Information" window (from the File menu) and examine
the server certificate.  If the host and organization names that
appear there match the company you expect, then you're probably safe
to submit the form.  If something unexpected appears there (like
"Embezzlers R Us") you might want to call the department store's 800
number.

<HR>

<H2><A NAME="Q58">Q58: How private are my requests for Web documents?</A></H2>

Read <A HREF="#privacy">section (7)</A> above.  All requests for documents
are logged by the
Web server.  Although your name is not usually logged, your IP address
and computer's host name usually is.  In addition, some servers also
log the URL you were viewing (such as your home page) at the time you
requested the new URL.  If the site is well administered, the record
of your accesses will be used for statistics generation and debugging
only.  However, some sites may leave the logs open for casual viewing
by local users at the site or even use them to create mailing lists.

<p>
The contents of queries in forms submitted using the GET request
appear in the server log files because the query is submitted as part
of the URL.  However, when a query is submitted as a POST request
(which is often the case when submitting a fill-out form), the data
you submit doesn't get logged.  If you are concerned about the
contents of a keyword search appearing in a public log somewhere,
check whether the search script uses the GET or POST method.  The
easiest technique is to try an innocuous query first.  If the contents
of the query appear in the URL of the retrieved document, then they
probably appear in the remote server's logs too.

<p>
Server/browser combinations that use data encryption, such as
Netsite/Netscape, encrypt the URL request.  Furthermore the encrypted
request, because it is submitted as a POST request, does not appear in
the server logs.

<hr>

<h2><a name="Q59">Q59: What's the difference between Java and JavaScript?</a></h2>
Despite the similarity in names, Java and JavaScript are two separate entities.
<a href="tppmsgs/msgs6.htm#646" tppabs="http://www.javasoft.com/">Java</a> is a language designed by
Sun Microsystems.  Java
scripts are precompiled into a compact form and stored on the server's side of
the connection.  HTML documents refer to the mini-applications known as
Java "applets" by incorporating &lt;APPLET&gt; tags.  Browsers that support
the &lt;APPLET&gt; tag (currently only Netscape Navigator 2.0 and
Sun's HotJava),
download the compiled Java applications and execute them.
<p>
JavaScript is a series of extensions to the HTML language understood only by
Netscape Navigator versions 2.0 (and higher).  It's an interpreted language designed
for controlling the Netscape browser; it has the ability to open
and close windows, manipulate form elements, adjust browser settings, and
download and execute Java applets.
<p>
Although JavaScript has a similar syntax to Java, it is quite distinct in
many ways.

<h2><a name="Q60">Q60: Are there any known security holes in Java?</a></h2>
Java scripts, because they execute on the
browser's side of the connection instead of on the server's, move the
security risk squarely from the server to the client.  Is there anything
for the client to worry about?
<p>
Several failsafes are built into Java to prevent it from compromising
the remote user's machine.  When running as applets, Java scripts are
restricted with respect to what they are allowed to do.  They are not
allowed to execute arbitrary system commands, to load system libraries,
or to open up system device drivers such as disk drives.  In addition,
scripts are generally limited to reading and writing to files in a
user-designated directory only (the HotJava browser allows you to
set this directory, while Netscape disallows all file manipulation).
<p>
Applets are also limited in the network connections they can make:  An
applet is only allowed to make a network connection back to the
server from which it was downloaded.  This is important for reasons
discussed below.
<p>
Finally, a fundamental limitation on Java applets is that they can
read and write to the network, read and write to the local disk,
but not both.  This limitation was created to reduce the risk of an
Applet spying on the user's private documents and transmitting the
information back to the server.
<p>
Unfortunately in the short time since its release, a number of
security holes have been found in Java caused by bugs in
the implementation.  Although most of the known bugs have been fixed
in the current release, at least one serious security hole remains.
You are advised to turn Java off (from the Netscape Security
Preferences menu item)
except when retrieving URLs from well-known and trusted hosts.

<h3>Ability to Execute Arbitrary Machine Instructions</h3>

On 22 March 1996, Drew Dean (<a href="tppmsgs/msgs7.htm#735" tppabs="http://www.austria.eu.net/www-security-faq/ddean@CS.Princeton.EDU">
ddean@CS.Princeton.EDU</a>and Ed Felton (<a
href="mailto:felten@CS.Princeton.EDU"> felten@CS.Princeton.EDU</a>) of
the Princeton Dept of Computer Science, announced that they had
successfully exploited a bug in Java to create a applet that deletes a
file on the user's local disk.  Details of this bug had not been
released at the time of this writing (28 March 1996), but Felton
describes the bug as allowing arbitrary machine code to be executed on
the user's machine.  This would appear to be an extremely serious problem:
it allows an applet to perform such malicious acts as
deleting users' files, implanting viruses, or opening the door to a
break-in attempt.
<p>
This bug is said to be present in version 2.0 of Netscape as well
as the recent 2.01 "security enhancements" release.  The authors have
not stated whether the bug is limited to Unix versions of Netscape
Navigator, or are
present in the Windows and (beta release) Macintosh versions as well.

More information on this bug can be found at:

<pre>
   <a href="tppmsgs/msgs6.htm#647" tppabs="http://www.cs.princeton.edu/~ddean/java">http://www.cs.princeton.edu/~ddean/java</a>
</pre>

<h3>Ability to Make Network Connections with Arbitrary Hosts</h3>
Version 2.0 of Netscape Navigator contained another Java bug, this one
involving the restriction on Applets from contacting arbitrary hosts.
<strong>This bug has been fixed</strong> in version 2.01 of Netscape,
and you should upgrade to 2.01 if you haven't already.
<p>
Applets are supposed to be able to talk only to the server
that they originated from.  However in early March 1996, Steve Gibbons
(<a href="mailto:sgibbo@amexdns.amex-trs.com">
sgibbo@amexdns.amex-trs.com</a>) and Drew Dean
(<a href="mailto:ddean@CS.Princeton.EDU">ddean@CS.Princeton.EDU</a>)
independently discovered holes in the implementation that allows Applets to
make connections to any host on the Internet.  This is a serious
problem: once downloaded to a user's machine, the applet
can now attempt to make a connection to any machine on the user's
local area network,
<em>even if the LAN is protected by a firewall</em>.  Many LANs
are set up so that local machines are trusted to access services
that distant machines are not.  As a trivial example, an Applet
could open up a connection to the organization's private news
server, fetch recent postings to an internal newsgroup, and
transmit them back to a foreign host.
<p>
Unix users who are familiar with the Berkeley
<code>rsh</code>, <code>rlogin</code> and <code>rcp</code> commands
will see that this bug represents a risk to systems that
trust each other enough to allow commands to be executed remotely.
This bug also makes it possible for Applets to collect detailed
information on network topology and name services from behind
a firewall.
<p>
This security hole involves Java's trusting use of the Domain Name
System (DNS) to confirm that it is allowed to contact a particular
host.  A malfeasant using his own DNS server can create a
bogus DNS entry to fool the Java system into thinking that a
script is allowed to talk to a host that it is not authorized to
contact.  <a href="tppmsgs/msgs6.htm#648" tppabs="http://www.cs.princeton.edu/~ddean/java/">This
article</a> describes the problem in more detail.
<p>
More information about Java and security can be found
at URL:
<pre>
  <a href="tppmsgs/msgs0.htm#99" tppabs="http://java.sun.com/sfaq/">http://java.sun.com/sfaq/</a>
</pre>

<h2><a name="Q61">Q61: Are there any known security holes in JavaScript?</a></h2>
JavaScript also has a troubling history of security holes, three of
which have persisted despite the Netscape developers' attempts to
close them.
<p>
Unlike the Java hole, which can actively damage the user's machine,
the JavaScript holes all involve infringements on the user's privacy.
The following holes all exist in Netscape 2.01, and were
discovered and publicized by John Robert LoVerso of the OSF Research
Institute (<a
href="mailto:loverso@osf.org">mailto:loverso@osf.org</a>:
<ol>
  <li>JavaScripts can trick the user into uploading a file on his
      local hard disk or network mounted disk to an arbitrary machine
      on the Internet.  Although the user must click a button in
      order to initiate the transfer, the button can easily
      masquerade as something innocent.  Nor is there any indication
      that a file transfer has occurred before or after the event.
      This is a major security risk for systems that rely on a
      password file to control access, because a stolen password file
      can often be readily cracked.
  <li>JavaScripts can obtain directory listings of the user's local
      hard disk and any network mounted disks.  This represents both
      an invasion of privacy and a security risk, since an
      understanding of a machine's organization is a great advantage
      for devising a way to break into it.
  <li>JavaScripts can monitor all pages the user visits during a
      session, capture the URLs, and transmit them to a host somewhere
      on the Internet.  This hole requires a user interaction to
      complete the upload, but as in the first example the interaction
      can be disguised in an innocuous manner.
</ol>
A description of these bugs can be found at:
<pre>
   <a href="tppmsgs/msgs6.htm#649" tppabs="http://www.osf.org/~loverso/javascript/">http://www.osf.org/~loverso/javascript/</a>
</pre>

Because of concerns for public safety, LoVerso has not generally
released the details of all three holes.  However it is unlikely that the
same holes cannot be discovered by others.
<p>
It is expected that these bugs will be addressed in the next release
of Netscape Navigator.  However, until that time, you are strongly
advised to turn JavaScript off (from the Network & Security Options
dialog) except when retrieving URLs from well-known and trusted hosts.
If you do choose to use JavaScript, be alert for 
pages that do unexpected things such as creating superfluous windows
or prompting you to take unusual actions.  These may be indications of
a malevolent script at work.
<hr>
<ul>
  <li><A HREF="WWW-SE~1.HTM#contents" tppabs="http://www.austria.eu.net/www-security-faq/www-security-faq.html#contents">Up to Table of contents</A>
  <li><A HREF="WWWSF6~2.HTM" tppabs="http://www.austria.eu.net/www-security-faq/wwwsf6.html">Backward to <cite>Server Logs and Privacy</cite></a>
  <li><A HREF="WWWSF8~2.HTM" tppabs="http://www.austria.eu.net/www-security-faq/wwwsf8.html">Forward to <cite>Specific Servers</cite></a>
</ul>
<HR>
<address>Lincoln D. Stein, lstein@genome.wi.mit.edu<br>
<a href="INDEX-1.HTM" tppabs="http://www.austria.eu.net/">Whitehead Institute/MIT Center for Genome Research</a></address>
<!-- hhmts start -->
Last modified: Thu Mar 28 13:15:36 EST 1996
<!-- hhmts end -->
</body> </html>
