<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>FRACTINT PHC tutorial </title>
<link rev=made href="mailto:noel@triumf.ca">
</head>
<body>
<!--  This is a comment -->
<br><img width=680 height=10 src="BAR19.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar19.gif"><br>
<h1>
Psuedo High Color <i> &quot;PHC&quot; </i> <br>
and <br>
Psuedo True Color <i> &quot;PTC&quot; </i> Fractals 
</h1>
<h2>
A tutorial by Sylvie Gallet <br>
version 1.0 <br>
September 1996
</h2>
<br><img width=680 height=10 src="BAR19.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar19.gif"><br>
<p>
<ul>
<li> 
<a href="#overlay_anchor"> 
<b> 
PHC Method: Overlaying two fractals (&quot;16-bit PHC&quot;) 
</b>
</a>
<p>
<ul>
<li> 
<a href="#assign_anchor"> 
Assignment statements
</a>
<li> 
<a href="#bailout_anchor"> 
Bailout tests
</a>
<li> 
<a href="#bailex_anchor">
Examples
</a>
<p>
<ul>
<li> 
<a href="#mandjul_anchor">
Mandel and Julia types
</a>
<li> 
<a href="#mandnewt_anchor">
Mandel and Newton types
</a>
<p>
</ul>
</ul>
<li> 
<b>
<a href="#ptc1_anchor">
First PTC Method: Overlaying three fractals (&quot;24-bit PTC&quot;) 
</a>
</b>
<li> 
<b>
<a href="#ptc2_anchor">
Second PTC Method: Overlaying four fractals (&quot;32-bit PTC&quot;)
</a>
</b>
<li> 
<b>
<a href="#speedup_anchor">
Speed ups
</a>
</b>
<p>
<ul>
<li> 
<a href="#avoid-exp_anchor">
Avoid exponentiation...
</a>
<li> 
<a href="#avoid-calc_anchor">
Avoid unnecessary calculations...
</a>
<li> 
<a href="#algebra_anchor">
Use the algebraic rules...
</a>
</ul>
<p>
<li> 
<b>
<a href="#how2mod_anchor">
How to write or modify PHC and PTC formulas
</a>
</b>
<li> 
<b>
<a href="#convert_anchor">
Conversion of old PHC formulas for use with Fractint 19.5
</a>
</b>
<li> 
<b>
<a href="#notes-about_anchor">
Notes about the formula parser
</a>
</b>
<p>
<ul>
<li> 
<a href="#calc-mode_anchor">
Calculation modes
</a>
<li> 
<a href="#whats-wrong_anchor">
What's wrong with 3 * trunc(cr / 3) ?
</a>
<li> 
<a href="#precedence_anchor">
Precedence
</a>
<p>
</ul>
<li> 
<b>
<a href="#limitations_anchor">
Limitations of PHC and PTC
</a>
</b>
<li> 
<b>
<a href="#conclusion_anchor">
Conclusion
</a>
</b>
<p>
</ul>
<br><img width=680 height=10 src="BAR19.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar19.gif"><br>
<p>

This document is Copyright (c) 1996 by Sylvie Gallet.
I encourage you to copy and distribute it, so long as you leave it
unchanged.  It may NOT be used for commercial purposes without my
explicit prior permission.

<p>
    Any comments, questions, corrections... are welcome.
    My addresses are:
<pre>
              CompuServe: 101324,3444
              Internet  : 101324.3444@compuserve.com
</pre>


<p>
Pseudo-HiColor (PHC) was co-discovered by Jim Deutch who wrote the
very first PHC formula and Lee Skinner who realized the enormous
possibilities that this technique offers.  Given the great interest
aroused by PHC, the Fractint developers decided to implement three
new variables that make formulas much simpler; a big thank you to
Tim Wegner, Jonathan Osuch and George Martin for doing this!
Pseudo-TrueColor (PTC) is an extension of the PHC concept.  All the
PHC and PTC formulas included in this document are by the author of
these lines.
Thanks to Lee Skinner and George Martin for their help, suggestions
and encouragements.

<p>
The <a href="../../../../tppmsgs/msgs23.htm#2359" tppabs="http://spanky.triumf.ca/pub/fractals/formulas/phc-tutor.doc">
text-only version </a> of this tutorial is also available for downloading
<p>
<ul>
<li> 
<a name="overlay_anchor">
<font size=4>
<b>
PHC Method: Overlaying two fractals (&quot;16-bit PHC&quot;)
</b>
</font>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
<p>
 It is possible to combine two fractals (say fractal_0 and fractal_1) in
 one image.  Imagine that alternate screen pixels form a checkerboard
 pattern (represented by 0's and 1's) as follows:

<pre>
                          0 1 0 1 0 . .
                          1 0 1 0 1 . .
                          0 1 0 1 0 . .
                          1 0 1 0 1 . .
                          . . . . . . .
</pre>
<p>
 If one fractal is drawn on the &quot;white squares&quot; (the 1's) and the other
 on the black squares (the 0's), the separate fractals will be visible,
 and at higher screen resolutions you will not be able to see the way the
 individual pixels intermesh with the others.  The effect is as if the two
 fractals were drawn on separate transparent sheets and overlaid.
<p>
...
<b>
<font size=4>
<img align="middle" src="FRACT020.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract020.gif"> 
+ 
<img align="middle" src="FRACT021.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract021.gif">
=
<img align="middle" src="FRACT025.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract025.gif">
</font>
</b>
<p>
 Fractint v. 19.5 provides a predefined variable &quot;whitesq&quot;, which is
 automatically set to 1 prior to the calculation of a white square pixel,
 and to 0 prior to calculation of a black square pixel.  Let's see how to
 use this variable in a formula.
<p>
<ul>
<li>
<a name="assign_anchor">
<font size=3>
<b>
Assignment statements
</b>
</font>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
<p>
Suppose that fractal_0 and fractal_1 have the following assignment statements:
<pre>
          fractal_0 {                   fractal_1 {
            ; whitesq == 0                ; whitesq == 1
            ...                           ...
            var = something               var = somethingelse
            ...                           ...
            }                             }
</pre>
<p>
To assign the appropriate value to var, our PHC formula will have to simulate
an IF...THEN...ELSE... construct:

<pre>
     if (whitesq == 0)         /* if &quot;whitesq == 0&quot; is TRUE */
       var = something ;
     else                      /* if &quot;whitesq == 0&quot; is FALSE */
                               /* or &quot;whitesq == 1&quot; is TRUE */
       var = somethingelse ;
</pre>
 This can be done with the following line:
<p>
<pre>
     var = something * (whitesq == 0) + somethingelse * (whitesq == 1)
</pre>
<p>
 which results in &quot;something&quot; being assigned to var for the black squares,
 and &quot;somethingelse&quot; being assigned to var for the white squares.

<p>
 To understand how it works, it's important to know that Fractint represents
 TRUE with a one, and FALSE with a zero, therefore:

<pre>
     * if whitesq is equal to 0:
         - &quot;whitesq == 0&quot; evaluates to 1
         - &quot;whitesq == 1&quot; evaluates to 0
       and var = something * 1 + somethingelse * 0
               = something

     * if whitesq is equal to 1:
         - &quot;whitesq == 0&quot; evaluates to 0
         - &quot;whitesq == 1&quot; evaluates to 1
       and var = something * 0 + somethingelse * 1
               = somethingelse
</pre>
<p>

 You may notice that the result of the test &quot;whitesq == 1&quot; is 
equal to the value of the variable &quot;whitesq&quot;, 
so we can use the following statement:
<p>
<pre>
     var = something * (whitesq == 0) + somethingelse * whitesq
</pre>
<p>
<li>
<font size=3>
<a name="bailout_anchor">
<b>
Bailout tests
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 Suppose that fractal_0 and fractal_1 use the bailout tests bailout_0 and
 bailout_1.  What will be the PHC bailout test?

<p> 
Remember that if the answer of a bailout test is &quot;TRUE&quot; (or 1), the loop
 must be performed again; otherwise, it is time to quit iterating.

<p> 
 The bailout test of the PHC formula must be the translation in the parser
 language of the following structure:

<pre>
     if (whitesq == 0)           /* &quot;whitesq == 0&quot; TRUE */
       { if (bailout_0 == 1)     /* bailout_0 TRUE */
           PHC_bailout = 1 ;
         else                    /* bailout_0 FALSE */
           PHC_bailout = 0 ;
       }
     else                        /* &quot;whitesq == 1&quot; TRUE */
       { if (bailout_1 == 1)     /* bailout_1 TRUE */
           PHC_bailout = 1 ;
         else                    /* bailout_1 FALSE */
           PHC_bailout = 0 ;
       }
</pre>
<p>
 We can see that PHC_bailout is TRUE only in two cases:
<pre>
     when (whitesq == 0) and (bailout_0 == 1)
   or
     when (whitesq == 1) and (bailout_1 == 1)
</pre>
<p>
 We finally get the following expression where &quot;&amp;&amp;&quot; and 
&quot;||&quot; are the logical
 operators &quot;and&quot; and &quot;or&quot;:

<pre>
     (bailout_0 &amp;&amp; (whitesq == 0)) || (bailout_1 &amp;&amp; whitesq)
</pre>
<p>
 and since comparisons have <a href="#precedence_anchor"> precedence over 
logical operators </a>:

<pre>
     (bailout_0 &amp;&amp; whitesq == 0) || (bailout_1 &amp;&amp; whitesq)
</pre>
<p>
<li>
<font size=3>
<a name="bailex_anchor">
<b>
 Examples
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
<ul>
<li>
<font size=2>
<a name="mandjul_anchor">
Mandel and Julia types
</a>
</font>
<p>
 This is the easiest case: both fractal use the same iteration instruction
 and the same bailout test.
<p>
<pre>
   mandel { ; Mandel set of z^2 + c
     z = c = pixel :
      z = z*z + c
       |z| &lt;= 4
     }
   julia { ; Julia set of z^2 + (-0.75,0.1234)
     z = pixel , c = (-0.75,0.1234) :
      z = z*z + c
       |z| &lt;= 4
     }
</pre>
<p>
<p>
 Since the only difference is the initial value of c, the PHC formula will
 use whitesq only in the init section:

<p>
<pre>
   phc_mj { ; overlay the Mandel set of z^2 + c with
            ; the Julia set of z^2 + (-0.75,0.1234)
     z = pixel
      c = pixel * (whitesq == 0) + (-0.75,0.1234) * whitesq :
       z = z*z + c
        |z| &lt;= 4
     }

</pre>
<p>
<p>
 and the Julia set will be drawn on the white squares of the checkerboard,
 and the Mandelbrot set on the black squares. <p>
<img align="middle" src="FRACT025.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract025.gif">
<p>
<li>
<font size=2>
<a name="mandnewt_anchor">
Mandel and Newton types
</a>
</font>
<p>
 Here, except &quot;z = pixel&quot;, everything is different.
<p>
<p>
<img align="left" src="FRACT021.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract021.gif">
<pre>
<br>
<br>
   mandel { ; Mandel set of z^2 + c
     z = c = pixel :
      z = z*z + c
       |z| &lt;= 4
     }
</pre>
<br>
<br>
<br>
<p>
<p>
<p>
<img align="left" src="FRACT022.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract022.gif">
<pre>

   newton { ; Julia set of Newton's method 
            ; applied to z^3 - 1 = 0
        z = pixel :
        n = z^3 - 1 , d = 3*z^2
        z = z - n/d
        |n| &gt;= 0.000001
     }
</pre>
<br>
<br>
<p>
<p>
 The resulting PHC formula is:
<pre>

   phc_mn_A { ; overlay the Mandel set of z^2 + c with the Julia
              ; set of Newton's method applied to z^3 - 1 = 0
     z = c = pixel :
      n = z^3 - 1 , d = 3*z^2
      z = (z*z + c) * (whitesq == 0) + (z - n/d) * whitesq
       (|z| &lt;= 4 &amp;&amp; whitesq == 0) || (|n| &gt;= 0.000001 &amp;&amp; whitesq)
     }
</pre>
<img align="middle" src="FRACT026.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract026.gif">
<p>
 You'll notice that c is initialized to pixel even when whitesq == 1 but it
 is not used by the Newton algorithm.
</ul>
</ul>
<p>
<li>
<font size=4>
<a name="ptc1_anchor">
<b>
First PTC Method: Overlaying three fractals (&quot;24-bit PTC&quot;)
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
Overlaying three fractals can be done with the following pattern:
<pre>
                          0 1 2 0 1 2 . .
                          1 2 0 1 2 0 . .
                          2 0 1 2 0 1 . .
                          0 1 2 0 1 2 . .
                          . . . . . . . .
</pre>
<p>
 Fractint v. 19.5 provides a predefined variable &quot;scrnpix&quot;, which 
is set
 to (column, row) prior to calculation of each pixel.  The upper left hand
 corner of the screen is (0,0); at resolution 1024x768, the lower right
 hand corner is therefore (1023,767).

<p>
 Here, we'll use scrnpix to assign the value 0, 1 or 2 to a variable r
 (as you can see, I choose a very explicit name!).

<p>
 With col = real(scrnpix) and row = imag(scrnpix), the value of r should
 be:
<pre>
     r = (col + row) modulo 3
</pre>
 or, using the parser language:
<pre>
     cr = real(scrnpix) + imag(scrnpix)
     r = cr - 3 * trunc(cr / 3)
</pre>
<p>
 But this instruction doesn't work <a href="#whats-wrong_anchor">
(see &quot;what's wrong&quot;)</a>.

<p>
 The following instruction does work:
<pre>
     r = cr - 3 * trunc(cr / real(3))
</pre>
<p>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
Now, let's see an example:
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
<p>
 Suppose you want to overlay the three following fractals:
<p>
<img align="left" src="FRACT021.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract021.gif">
<p>
<br>
<p>
<pre>
   mandel { ; Mandel set of z^2 + c
     z = c = pixel :
      z = z*z + c
       |z| &lt;= 4
     }
</pre>
<p>
<p>
<br>
<img align="left" src="FRACT020.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract020.gif">
<p>
<br>
<p>
<pre>
   julia { ; Julia set of z^2 + (-0.75,0.1234)
     z = pixel , c = (-0.75,0.1234) :
      z = z*z + c
       |z| &lt;= 4
     }
</pre>
<p>
<br>
<br>
<img align="left" src="FRACT022.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract022.gif">
<pre>
<br>
   newton { ; Julia set of Newton's method 
            ; applied to z^3 - 1 = 0
     z = pixel :
      n = z^3 - 1 , d = 3*z^2
      z = z - n/d
       |n| &gt;= 0.000001
     }
</pre>
<p>
<br>
<br>
<p>
 We can merge them in the following way:
<pre>
   ptc_mjn_A { ; overlay the Mandel set of z^2 + c with the Julia set
               ; of z^2 + (-0.75,0.1234) and the Julia set of Newton's
               ; method applied to z^3 - 1 = 0
     cr = real(scrnpix) + imag(scrnpix)
     r = cr - 3 * trunc(cr / real(3))
     z = pixel
     c = pixel * (r == 0) + (-0.75,0.1234) * (r == 1) :
      n = z^3 - 1 , d = 3*z^2
      z = (z*z + c) * (r == 0 || r == 1) + (z - n/d) * (r == 2)
       (|z| &lt;= 4 &amp;&amp (r == 0 || r == 1)) || (|n| &gt;= 0.000001 &amp;&amp; r == 2)
     }
</pre>
<img align="middle" src="FRACT028.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract028.gif">
<p>
 In this formula, we could consider three cases (r == 0, r == 1 and r == 2)
 but  since the first two ones use the same &quot;z = ...&quot; statement and the same
 bailout test, we can combine them in &quot;r == 0 || r == 1&quot; or &quot;r != 2&quot; (r not
 equal to 2).  Thus, the last lines become:

<pre>
       z = (z*z + c) * (r != 2) + (z - n/d) * (r == 2)
       (|z| &lt;= 4 &amp;&amp; r != 2) || (|n| &gt;= 0.000001 &amp;&amp; r == 2)
</pre>
<p>
<li>
<font size=4>
<a name="ptc2_anchor">
<b>
Second PTC Method: Overlaying four fractals (&quot;32-bit PTC&quot;)
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
The best dithering is produced by the following pattern:
<pre>
                          0 1 2 3 0 1 . .
                          2 3 0 1 2 3 . .
                          0 1 2 3 0 1 . .
                          2 3 0 1 2 3 . .
                          . . . . . . . .

 and r is given by the formula:
     r = (col + 2*row) modulo 4
 or, using the parser language:
     cr = real(scrnpix) + 2 * imag(scrnpix)
     r = cr - 4 * trunc(cr / 4)
</pre>
<p>
 and r can then be used as in the previous examples, to combine four
 fractals in one image.
<p>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
<b>
Here is an example:
</b>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
<pre>
   mand_0 {                        mand_1 {
     z = c = sin(pixel) :            z = c = pixel :
      z = z*z + c                     z = z*z + c
       |real(z)| &lt;= 4                  |z| &lt;= 4
     }                               }

   mand_2 {                        mand_3 {
     z = c = 1/pixel :               z = c = -pixel :
      z = z*z + c                     z = z*z + c
       |imag(z)| &lt; 4                  |real(z)+imag(z)| &lt; 4
     }                               }

   phc_4m_A { ; overlay four Mandels with different initializations
              ; and bailout tests
              ; Isn't it terrific???
     cr = real(scrnpix) + 2 * imag(scrnpix)
     r = cr - 4 * trunc(cr / 4)
     c0 = sin(pixel) * (r == 0)
     c1 = pixel * (r == 1)
     c2 = 1/pixel * (r == 2)
     c3 = -pixel * (r == 3)
     z = c = c0 + c1 + c2 + c3 :
      z = z*z + c
      test_0 = |real(z)| &lt; 4  &amp;&amp;  r == 0
      test_1 = |z| &lt; 4  &amp;&amp;  r == 1
      test_2 = |imag(z)| &lt; 4  &amp;&amp;  r == 2
      test_3 = |real(z)+imag(z)| &lt; 4  &amp;&amp;  r == 3
       test_0 || test_1 || test_2 || test_3
     }
</pre>
<img align="middle" src="FRACT023.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/fract023.gif">

<p>
 Let's look at this formula in detail.
<ul>
<li> Initialization section:
<ul>
<li> The first two lines calculate r.
<li> The next five lines calculate separately the constants c0..c3; only one
   of them is set to a non-zero value and z and c are set to this value.
</ul>
<li>
 Iterated loop:
<ul>
<li> First line: no comments!
<li> Next four lines: each test_x variable is set to 0 or 1 depending on the
   result of a logical &quot;and&quot;.  Once again, three of them are set to 0 while
   the last one is set to the value of the corresponding bailout test.
</ul>
<li>
 Bailout test:
<ul>
<li>   Performs a logical &quot;or&quot; with all the test_x values.
</ul>
</ul>
<p>
<li>
<font size=4>
<a name="speedup_anchor">
<b>
Speed ups
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
 The best way to make your formulas run a little faster would be to read or
 reread Bradley Beacham's FRMTUTOR.TXT (that'll save me having to plagiarize
 his work &lt;g&gt;).
<p>
<ul>
<li>
<font size=3>
<a name="avoid-exp_anchor">
<b>
Avoid exponentiation...
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 In the newton formula, we can replace
<pre>
     n = z^3 - 1 , d = 3*z^2
</pre>
 with
<pre>
     z2 = z*z , n = z2*z - 1 , d = 3*z2
</pre>
 This gives: <br>
<pre>
   newton_B { ; Julia set of Newton's method 
              ; applied to z^3 - 1 = 0
     z = pixel :
      z2 = z*z , n = z2*z - 1 , d = 3*z2
       z = z - n/d
        |n| &gt;= 0.000001
     }
</pre>
<p>
<li>
<font size=3>
<a name="avoid-calc_anchor">
<b>
Avoid unnecessary calculations...
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 Let's make the same change in phc_mn_B and ptc_mjn_B but here, we don't
 need to recalculate z*z: we'll replace it with z2.
<pre>
   phc_mn_B { ; overlay the Mandel set of z^2 + c with the Julia
              ; set of Newton's method applied to z^3 - 1 = 0
     z = c = pixel :
      z2 = z*z , n = z2*z - 1 , d = 3*z2
      z = (z2 + c) * (whitesq == 0) + (z - n/d) * whitesq
       (|z| &lt; 4 &amp;&amp; whitesq == 0) || (|n| &gt;= 0.000001 &amp;&amp; whitesq)
     }

   ptc_mjn_B { ; overlay the Mandel set of z^2 + c with the Julia set
               ; of z^2 + (-0.75,0.1234) and the Julia set of Newton's
               ; method applied to z^3 - 1 = 0
     cr = real(scrnpix) + imag(scrnpix)
     r = cr - 3 * trunc(cr / real(3))
     z = pixel
     c = pixel * (r == 0) + (-0.75,0.1234) * (r == 1) :
      z2 = z*z , n = z2*z - 1 , d = 3*z2
      z = (z2 + c) * (r != 2) + (z - n/d) * (r == 2)
       (|z| &lt; 4 &amp;&amp; r != 2) || (|n| &gt;= 0.000001 &amp;&amp; r == 2)
     }
</pre>
<p>
<li>
<font size=3>
<a name="algebra_anchor">
<b>
Use the algebraic rules...
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 Consider the initialization section of phc_4m_A:
<pre>
     c0 = sin(pixel) * (r == 0)
     c1 = pixel * (r == 1)
     c2 = 1/pixel * (r == 2)
     c3 = -pixel * (r == 3)
     z = c = c0 + c1 + c2 + c3 :

 You may notice that c1 + c3 = pixel * (r == 1) - pixel * (r == 3)
                             = pixel * ((r == 1) - (r == 3))

 Then:
     z = c = c0 + c2 + pixel * ((r == 1) - (r == 3))
</pre>
<p>

 This will make the formula a little more obscure but avoids a multiplication.
<pre>
    phc_4m_B { ; overlay four Mandels with different 
               ;initializations and bailout tests
               ; Isn't it terrific???
     cr = real(scrnpix) + 2*imag(scrnpix)
     r = cr - 4 * trunc(cr / 4)
     c0 = sin(pixel) * (r == 0)
     c2 = 1/pixel * (r == 2)
     z = c = c0 + c2 + pixel * ((r == 1) - (r == 3)) :
      z = z*z + c
      test_0 = |real(z)| &lt; 4  &amp;&amp;  r == 0
      test_1 = |z| &lt; 4  &amp;&amp;  r == 1
      test_2 = |imag(z)| &lt; 4  &amp;&amp;  r == 2
      test_3 = |real(z)+imag(z)| &lt; 4  &amp;&amp;  r == 3
       test_0 || test_1 || test_2 || test_3
     }
</pre>
</ul>
<p>
<li>
<font size=4>
<a name="how2mod_anchor">
<b>
How to write or modify PHC and PTC formulas
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
 As we've seen earlier, the PHC or PTC dithering is based on the value of
 a variable initialized by Fractint (whitesq) or in the formula (r).

<p>
 To write a PHC formula, you just have to use &quot;whitesq&quot; at least once.
 A PTC formula will start with these lines:
<pre>
     cr = real(scrnpix) + imag(scrnpix)
     r = cr - 3 * trunc(cr / real(3))
 or these ones:
     cr = real(scrnpix) + 2 * imag(scrnpix)
     r = cr - 4 * trunc(cr / 4)
</pre>
<p>
 For a good dithering, it's essential to leave the variables &quot;whitesq&quot;, &quot;cr&quot;
 and &quot;r&quot; intact.
<p>
 For example, if you change:<br>
<pre>
     r = cr - 3 * trunc(cr / real(3))
 to:
     r = cr - 3 * trunc(cr / real(3.5))
 the values of r will be:
     0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, ...
</pre>
<p>
 and the result will be quite disappointing.  Also, it will be helpful if
 you use the templates (including the variable names &quot;r&quot; and &quot;cr&quot;) in
 exactly the form shown above.  This will make it easier to identify and
 update formulas using PHC and PTC if future changes to Fractint's formula
 parser would make such updating desirable.


<p>
<li>
<font size=4>
<a name="convert_anchor">
<b>
Conversion of old PHC formulas for use with Fractint 19.5
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
 Lee Skinner has already updated more than 70 PHC formulas previously
 posted and uploaded on Compuserve's Graphdev forum.  The revised formulas,
 for Fractint 19.5 and later only, are available in the file phc.frm,
 downloadable from Graphdev lib 4 as phc_frms.zip.
 However, you'll probably need to convert your old formulas that have never
 been uploaded on Graphdev.  This is very easy!  If the formula contains
 these lines:
<pre>
        count = (count + 1) * (count != (p3-1))
        evenodd = (evenodd == (count == 1))
        oddeven = (evenodd == 0)

 or these ones:

  countreset = (count &lt; 1024)
  count = count * countreset
  evenodd=(evenodd &lt; 1)*(count != 0)*countreset + (countreset == 0)*evenodd
  oddeven = (evenodd &lt; 1)
  count = count + 1
</pre>
<p>
just delete them and replace evenodd by whitesq and oddeven by (whitesq==0).


<p>
<li>
<font size=4>
<a name="notes-about_anchor">
<b>
Notes about the formula parser
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
<ul>
<li>
<font size=3>
<a name="calc-mode_anchor">
<b>
Calculation modes
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 Fractint provides two calculation modes: integer math and floating point
 math.
<p>
 Though it often produces very nice images, integer math has an important
 limitation: you can't use numbers greater than 255.999... In integer mode,
 when you *think* you're using say 372, Fractint use 116 (372-256=116).
 For this reason, the Fractint developers decided to force the floating
 point mode when the formula parser detects the use of one of the predefined
 variables &quot;scrnpix&quot;, &quot;scrnmax&quot; and &quot;maxit&quot;.
<p>
<li>
<font size=3>
<a name="whats-wrong_anchor">
<b>
What's wrong with 3 * trunc(cr / 3) ?
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 When you run a formula in floating point mode, the formula parser uses
 some tricks to optimize the code.  Trunc(cr / 3) is the victim of one of
 these tricks.

<p>
 The problem is this: trunc(cr/3) is replaced by trunc(cr*(1/3)), but since
 1/3 is represented internally as .33333..., cr*(1/3) is slightly less than
 cr/3.  If cr is a multiple of 3, trunc(cr/3) therefore returns one less
 than you would expect.  For example trunc(6/3) calculates as
 trunc(6*.3333333...) or trunc(1.9999...), which in turn evaluates to 1
 instead of the expected result of 2.

<p>
 Replacing 3 with real(3) circumvents this problem and yields the desired
 result.

<p>
<li>
<font size=3>
<a name="precedence_anchor">
<b>
Precedence
</b>
</a>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<p>
 Precedence is a way to make mathematical expressions more readable by using
 less parentheses.  For a better comprehension of this section, you might
 want to look at the table of precedence in the Fractint documentation.

<p>
 The following expressions are mathematically equivalent because division and
 multiplication have a higher precedence than addition and subtraction (this
 means that divisions and multiplications will be performed before additions
 and subtraction):
<pre>
                2+(3*((5*3)+(4/5))*(7-5))
                2 + 3 * (5*3 + 4/5) * (7 - 5)
</pre>
<p>
 (they both evaluate to 96.8)
 I must confess that I tend to prefer the second one... (OK, I'm cheating,
 I just added a few white spaces... &lt;g&gt;).

<p>
<font size=2>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
<b>
 Now, let's see another example:
</b>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
 In this expression:<br>
<pre>
               (|z| &lt; 4) &amp;&amp; (whitesq == 0)
</pre>
<p>
 the parentheses mean that the comparisons must be performed before the
 logical AND.  Comparisons have a higher precedence than logical operators
 thus, we can remove the parentheses:
<pre>
               |z| &lt; 4 &amp;&amp; whitesq == 0
</pre>
<p>
<font size=2>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
<b>
We'll end with the bailout test of phc_mn_A:
</b>
<br><img width=680 height=10 src="BAR5.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar5.gif"><br>
</font>
<pre>
       (|z| &lt; 4 &amp;&amp; whitesq == 0) || (|n| &gt;= 0.000001 &amp;&amp; whitesq)
</pre>
<p>
 Can we remove the parentheses?  The answer is: no!  Without parentheses,
 and since we know that comparisons are performed first, this expression has
 the following format:<br>
<pre>
                A &amp;&amp; B || C &amp;&amp; D
</pre>
<p>
 &quot;&amp;&amp;&quot; and &quot;||&quot; have the same precedence and in such a case, the expression
 must be calculated from the left to the right.  Just look at this:
<br>
<pre>
                (1 &amp;&amp; 1) || (1 &amp;&amp; 0) =
                   1     ||    0     = 1

                  1 &amp;&amp; 1 || 1 &amp;&amp; 0 =
                    1    || 1 &amp;&amp; 0 =
                         1    &amp;&amp; 0 = 0
</pre>
<p>
</ul>
<li>
<font size=4>
<a name="limitations_anchor">
<b>
Limitations of PHC and PTC
</b>
</a>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
 With the new variables introduced in Fractint 19.5, PHC and PTC formulas
 are now resolution independent and the image can be interrupted, saved and
 restored.  Panning an even number of pixels for PHC images or multiples of
 3 for &quot;24-bit PTC's&quot; and multiples of 4 for &quot;32-bit PTC's is possible
 without artifacts.
<p>

 All PHC and PTC formulas require passes=1.

<p>
 The use of symmetry in PHC or PTC formulas or par files is not recommended
 since symmetry alters the pattern along the axes and results in horizontal
 or vertical lines.

<p>
<li>
<font size=4>
<b>
<a name="conclusion_anchor">
Conclusion
</a>
</b>
<br><img width=720 height=6 src="BAR17.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar17.gif"><br>
</font>
<p>
 That's all for now!  I hope you found this text interesting and useful.
 I'm planning an update of Bradley Beacham's Formula Tutorial which could
 include this text and any subject you'd like to see treated.
</ul>
<p>
<br><img width=680 height=10 src="BAR19.GIF" tppabs="http://spanky.triumf.ca/www/fractint/phc/bar19.gif"><br>
<b>
Back to
<a href="../FRACTI~1.HTM" tppabs="http://spanky.triumf.ca/www/fractint/fractint.html">
The Fractint Home Page.</a>
or back to
<a href="../FINDEX~1.HTM" tppabs="http://spanky.triumf.ca/www/fractint/findex.html">
The Fractint Index Page.</a>
</b>
<h3>This page maintained by</h3>
<address>
Noel Giffin, <a href="../../../../tppmsgs/msgs17.htm#1707" tppabs="http://www.triumf.ca/">TRIUMF</a><br>
noel@triumf.ca
</address>
</body>
</html>
