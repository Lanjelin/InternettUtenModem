<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<title>Programmeringsprojekt</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
</head>

<body bgcolor="#FFFFFF">
<h1>Programmeringsprojekt </h1>
<hr>
<h3>Inneh&aring;ll </h3>
<p align=center>|<a href="#ide">Id&eacute;</a>|<a href="#analys">Analys</a>|<a href="#design">Design</a>|<a href="#kodning">Kodning</a>| </p>
<p align=center>|<a href="#test">Test</a>|<a href="#support">Drift/Support</a>| </p>
<p align=center>|<a href="#diverse">Diverse information</a>|<a href="#godmetodik">Vad &auml;r god programmeringsmetodik?</a>| </p>
<hr>
<h3><a name="ide">Id&eacute;</a> </h3>
<p>Alla programmeringsprojekt b&ouml;rjar med att n&aring;gon f&aring;r en id&eacute;. Hur denna id&eacute; f&aring;s varierar naturligtvis 
- den kanske kommer n&auml;r du ligger och sover, eller n&auml;r du &auml;r p&aring; v&auml;g till bussen - egentligen &auml;r det 
inte s&aring; viktigt hur du f&aring;tt din id&eacute;, det viktiga &auml;r ju att du f&aring;tt den. Ett s&auml;tt att ta fram goda id&eacute;er &auml;r att 
samlas n&aring;gra stycken kompisar och sp&aring;na kring n&aring;got &auml;mne, samtidigt som n&aring;gon antecknar eller 
spelar in p&aring; kasettband. </p>
<h3><a name="analys">Analys</a> </h3>
<p>Ett datorprogram anv&auml;nds oftast f&ouml;r att l&ouml;sa ett problem eller f&ouml;r att underl&auml;tta ett arbete p&aring; n&aring;got 
s&auml;tt. I denna fas av utvecklingsarbetet kontrolleras om id&eacute;n &auml;r bra eller d&aring;lig - dvs om den &auml;r 
l&auml;mpad att bli ett datorprogram. Det kanske &auml;r b&auml;ttre att k&ouml;pa ett redan f&auml;rdigt program (om det 
finns) som l&ouml;ser uppgiften. En analys b&ouml;r g&ouml;ras f&ouml;r att vara s&auml;ker p&aring; att det system du utvecklar &auml;r 
det som din kund t&auml;nkt sig. Ofta &auml;r det ju s&aring; att du inte kommit p&aring; programid&eacute;n sj&auml;lv, utan n&aring;gon 
annan vill ha din hj&auml;lp att framst&auml;lla ett program som han(hon tror sig beh&ouml;va. </p>
<p>En analys g&ouml;rs f&ouml;r att reda ut vad som ska konstrueras innan du b&ouml;rjar fundera p&aring; hur du ska 
konstruera det. Analysen anv&auml;nds ocks&aring; f&ouml;r att hitta oklarheter och fel s&aring; tidigt som m&ouml;jligt i 
programutvecklingen. </p>
<p>N&aring;gra saker att t&auml;nka p&aring; vid analysen &auml;r f&ouml;ljande: </p>
<ul>
<li>Hur ska systemet anv&auml;ndas? </li>
<li>Hur ska det fungera gentemot ytterv&auml;rlden, dvs hur ska gr&auml;nssnittet mot anv&auml;ndaren se ut? </li>
<li>Vem ska anv&auml;nda programmet? </li>
</ul>
<p>Under analysfasen ska f&ouml;ljande dokument tas fram: </p>
<ul>
<li>Anv&auml;ndarbeskrivning </li>
<li>Kravspecifikation </li>
<li>Tidplan </li>
</ul>
<p>En kravspecifikation inneh&aring;ller ramar f&ouml;r tid, pris mm. Den inneh&aring;ller &auml;ven ett antal sk &quot;skall -krav&quot;, 
dvs s&aring;nt som programmet ska inneh&aring;lla. Det kan ocks&aring; finnas sk &quot;b&auml;r - krav&quot;. Dessa &auml;r krav som 
b&ouml;r finnas med om det g&aring;r att ordna, beroende p&aring; &ouml;vriga givna f&ouml;ruts&auml;ttningar (tid, pris bl a). 
Specifikationen ska ocks&aring; ange vilka begr&auml;nsningar systemet har. </p>
<p>En specifikation ska tala om vad systemet ska g&ouml;ra, men inte hur. In- och utdatas utseende ska 
noga specifieras (dvs datatyper, filer mm, som anv&auml;nds). </p>
<p>Tisplanen inneh&aring;ller en beskrivning an n&auml;r arbetet ska utf&ouml;ras och n&auml;r de olika momenten ska vara 
klara. Det h&auml;r &auml;r ofta mycket sv&aring;rt att ber&auml;kna, s&aring; du f&aring;r vara beredd p&aring; att tidplanen m&aring;ste 
&auml;ndras, revideras, under projektets g&aring;ng. Saker tar ofta l&auml;ngre tid &auml;n du fr&aring;n b&ouml;rjan tror. 
Multiplicera g&auml;rna med faktorn <font FACE="Symbol">p</font> (3,1415&#133;) f&ouml;r att vara n&aring;gots&aring;n&auml;r p&aring; den s&auml;kra sidan!!! </p>
<p>Anv&auml;ndarbeskrivningen inneh&aring;ller information om hur programmet uppf&ouml;r sig gentemot en 
anv&auml;ndare. Detta inneb&auml;r att du m&aring;ste g&ouml;ra klart f&ouml;r dig hur alla sk&auml;rmbilder, dialogrutor mm ska se 
ut och fungera. </p>
<p>Det &auml;r mycket viktigt att inneh&aring;llet i alla dessa dokument diskuteras med kunden innan du g&aring;r 
vidare med arbetet. </p>
<h3><a name="design">Design</a> </h3>
<p>B&ouml;rja med en &ouml;vergripande design, &auml;ven kallat systemering. Dela sedan in systemet i flera mindre 
delar, sk moduler. I detta skede ska du best&auml;mma hur kundens &ouml;nskem&aring;l ska uppfyllas. F&ouml;rs&ouml;k att 
identifiera generella programfunktioner. </p>
<p>N&auml;r modulindelningen ska g&ouml;ras beh&ouml;ver ett projekt ofta ha ett antal personer med 
specialkompetens inom just det omr&aring;det, tex bildbehandling, animering eller ber&auml;kning. Det betyder 
att det &auml;r en stor f&ouml;rdel om man hj&auml;lps &aring;t - &aring;tminstone om det &auml;r ett stort projekt. De projekt vi ska 
genomf&ouml;ra &auml;r normalt inte s&aring; stora att det beh&ouml;vs flera personer. Vid moduldesignen m&aring;ste du 
best&auml;mma hur programmets interna modulkommunikation ska se ut - definiera parametrar, globala 
variabler mm. </p>
<p>Under designfasen ska en designbeskrivning tas fram. D&auml;r ska det framg&aring; hur modulindelningen &auml;r 
gjord och hur modulerna samverkar med varandra. Du ska ocks&aring; g&ouml;ra en dokument&ouml;versikt f&ouml;r att 
h&aring;lla reda p&aring; alla ing&aring;ende dokument. Det blir en del pappersjobb! </p>
<p>I designfasen utvecklas de algoritmer som avg&ouml;r programmets funktion och prestanda. 
Programmets &ouml;vergripande funktion best&auml;ms. Det finns en hel del olika designmetoder utarbetade. 
En kallas f&ouml;r JSP-metoden och g&aring;r ut p&aring; att du ritar en del figurer och symboler som p&aring; ett speciellt 
s&auml;tt beskriver funktionen. En annan vanlig metod &auml;r att anv&auml;nsda sig av fl&ouml;desschemor. </p>
<h3><a name="kodning">Kodning</a> </h3>
<p>Om designfasen &auml;r ordentligt genomf&ouml;rd &auml;r kodningsfasen ungef&auml;r att j&auml;mf&ouml;ra med att skriva in en 
text i ett datorprogram - det ska allts&aring; g&aring; ganska smidigt. Det kan f&ouml;rvisso medf&ouml;ra en del problem, 
men ju b&auml;ttre du k&auml;nner till det valda programspr&aring;kets milj&ouml; och syntax, desto enklare &auml;r det. </p>
<p>I princip beh&ouml;ver du inte best&auml;mma programspr&aring;k f&ouml;rr&auml;n i detta l&auml;ge. Alla moduler i ett och samma 
projekt beh&ouml;ver inte ens skrivas i samma spr&aring;k. Ibland m&aring;ste vissa rutiner skrivas p&aring; ett s&aring;dant s&auml;tt 
att vissa programmeringsspr&aring;k inte &auml;r anv&auml;ndbara. </p>
<p>Om du vill g&ouml;ra program som &auml;r snabba kan du v&auml;lja tex C eller assembler, men om du anser att 
anv&auml;ndarv&auml;nligheten &auml;r viktigare v&auml;ljer du kanske hellre Visual Basic. </p>
<p>De flesta fel som finns i existerande program har uppkommit vis designfasen och inte vid kodningen. 
Det betyder allts&aring; att om du har t&auml;nkt fel vid designen blir det fel i programfunktionen &auml;ven om du 
har skrivit koden korrekt. </p>
<p>Vid kodningen b&ouml;rjar du l&auml;mpligen med att skriva pseudokod. Detta &auml;r en slags beskrivande 
blandning av text och kod uppst&auml;lld p&aring; samma s&auml;tt som den riktiga k&auml;llkoden senare st&auml;lls upp. 
Pseudokoden utg&ouml;r allts&aring; en utf&ouml;rlig beskrivning av programmets utseende med loopar, procedur 
anrop och sekvenser. </p>
<p>Pseudokoden &auml;r oftast l&auml;ttare f&ouml;r en m&auml;nniska att f&ouml;rst&aring; &auml;n sj&auml;lva k&auml;llkoden. Detta g&auml;ller fr&auml;mst vid 
programmering i l&aring;gniv&aring;spr&aring;k, tex assembler programmering. </p>
<p>Under kodningsfasen tas allts&aring; pseudokod och k&auml;llkod fram f&ouml;r alla programdelar. </p>
<h3><a name="test">Test</a> </h3>
<p>Testning ska alltid utf&ouml;ras fortl&ouml;pande under utvecklingsarbetet. F&ouml;rs&auml;kra dig alltid om att de 
procedurer, funktioner och moduler som ing&aring;r l&auml;mnar ifr&aring;n sig r&auml;tt resultat. Det &auml;r ibland 
n&ouml;dv&auml;ndigt att skriva extra kodsnuttar f&ouml;r att testa vissa delar av programmets funktion. Det kan 
ocks&aring; bli n&ouml;dv&auml;ndigt att skriva rena testprogram - vissa funktioner kanske inte ens g&aring;r att testa 
fullst&auml;ndigt. </p>
<p>Om du v&auml;ntar &auml;nd&aring; tills du skrivit f&auml;rdigt all kod innan du b&ouml;rjar testa programmet &auml;r det stor risk 
att du kommer att st&ouml;ta p&aring; m&aring;nga fel som kr&auml;ver &aring;tg&auml;rder. Ju mer du t&auml;nkt innan du s&auml;tter dig vid 
datorn, desto b&auml;ttre &auml;r det. Vid testningen &auml;r det meningen att du ska hitta alla fel (buggar) ditt 
program inneh&aring;ller. Det finns s&aring; klart olika metoder att utf&ouml;ra ett test p&aring;: </p>
<ul>
<li>M&auml;nsklig test </li>
</ul>
<p>Detta inneb&auml;r att ett antal personer har ett m&ouml;te d&auml;r de granskar olika dokument och f&ouml;rs&ouml;ker 
avg&ouml;ra om det kommer att fungera. </p>
<ul>
<li>Utf&ouml;randetest </li>
</ul>
<p>Programmets k&ouml;rs med k&auml;nda indata och utdata j&auml;mf&ouml;rs med det f&ouml;rv&auml;ntade resultatet, antingen 
manuellt eller automatiskt. </p>
<p>N&auml;r varje programdel har testats f&ouml;r sig ska allting slutligen testas tillsammans. Detta kallas ofta f&ouml;r 
integrationstest. </p>
<p>I denna fas ska du skriva dokumentet testspecifikation d&auml;r du skriver hur testerna ska utf&ouml;ras. </p>
<h3><a name="support">Drift/Support</a> </h3>
<p>Ett datorprogram ska f&ouml;rhoppningsvis anv&auml;ndas under ett antal &aring;r. Det inneb&auml;r att den som ska 
anv&auml;nda ditt program kan komma att beh&ouml;va en del hj&auml;lp en tid efter att han/hon k&ouml;pt ditt program. 
Det kan, trots alla anstr&auml;ngningar att g&ouml;ra ett felfritt program, visa sig att allting i ditt program inte 
fungerar i alla l&auml;gen. </p>
<p>Detta m&aring;ste du naturligtvis d&aring; &aring;tg&auml;rda p&aring; ett eller annat s&auml;tt. </p>
<p>Den f&ouml;rsta versionen av ett program brukar f&ouml;ljas av versionsbeteckningen 1.0. N&auml;r du f&aring;tt 
rapporter om ett antal buggar (felfunktioner) i ditt program kanske du v&auml;ljer att det &auml;r dags att 
&aring;tg&auml;rda dessa och du g&ouml;r d&aring; en ny version som du kallar 1.1. Om du i samma veva l&auml;gger till ett 
antal extra funktioner och finesser i programmet kanske du ist&auml;llet v&auml;ljer att d&ouml;pa om den nya 
versionen till 2.0, eftersom det &auml;r relativt stora f&ouml;r&auml;ndringar som du genomf&ouml;rt. P&aring; det h&auml;r viset 
forts&auml;tter du i princip att underh&aring;lla ditt program under hela dess livstid. </p>
<p>N&aring;got du kanske inte t&auml;nkt p&aring; &auml;r att kostnaden f&ouml;r drift/support och underh&aring;ll f&ouml;r ett program &auml;r 
den &ouml;verl&auml;gset st&ouml;rsta posten vid programutvecklingsprojekt av normal kommersiell klass (ca 
67%). </p>
<p>En av anledningarna till att du ska skriva en klar och redig kod med erforderliga kommentarer och 
annan dokumentation &auml;r naturligtvis att det underl&auml;ttar arbetet med programunderh&aring;llet. T&auml;nk p&aring; att 
det &auml;r mycket sannolikt att det &auml;r n&aring;gon annan &auml;n du sj&auml;lv som kommer att jobba med 
programf&ouml;r&auml;ndringar och uppdateringar. Det &auml;r ju ocks&aring; sj&auml;lvklart s&aring; att dukan r&aring;ka ut f&ouml;r att 
underh&aring;lla kod som n&aring;gon annan programmerare skrivit. </p>
<p>Ytterligare en synvinkel p&aring; detta med underh&aring;ll och support &auml;r vilken h&aring;rdvaroplattform 
programmet &auml;r avsett f&ouml;r. Antag att du skrivit ett program avsett att anv&auml;ndas i PC-milj&ouml;. Kan en 
anv&auml;ndare fortfarande k&ouml;ra programmet efter att denne k&ouml;pt en ny, modernare dator, eller lagt till 
n&aring;got instickskort i sin maskin? Kompatibilitet &auml;r med andra ord v&auml;ldigt viktigt. </p>
<p>Underh&aring;ll kan grovt delas in i nedanst&aring;ende delar: </p>
<ul>
<li>Fel&aring;tg&auml;rder </li>
<li>F&ouml;rb&auml;ttringar - modernisering </li>
<li>Anpassning till nya anv&auml;ndarmilj&ouml;er </li>
</ul>
<p>Den tredje punkten kan tex betyda att koden ska &ouml;verf&ouml;ras (portas) till att kunna k&ouml;ras p&aring; en 
Apple Macintosh. De flesta av dagens stora programtillverkande f&ouml;retag skriver programversioner 
b&aring;de f&ouml;r PC och Macintosh. </p>
<h3><a name="diverse">Diverse information</a> </h3>
<p>Vad &auml;r god programkvalitet? </p>
<ul>
<li>L&auml;ttanv&auml;nt </li>
<li>Feltolerant </li>
<li>V&auml;ldokumenterat </li>
<li>Programmet fungerar i m&aring;nga olika milj&ouml;er </li>
<li>L&aring;ga utvecklings- och underh&aring;llskostnader </li>
<li>Minneseffektivt och snabbt </li>
<li>L&auml;tt att testa </li>
<li>Enkelt och rent </li>
</ul>
<h3><a name="godmetodik">Vad &auml;r god programmeringsmetodik?</a> </h3>
<ul>
<li>T&auml;nk efter f&ouml;re </li>
<li>Dokumentera fortl&ouml;pande under utvecklingsarbetet </li>
<li>Bryt ned problemet i sm&aring; delar - modulindelning </li>
<li>G&ouml;r programmet s&aring; l&auml;tt att f&ouml;rst&aring; som m&ouml;jligt </li>
<li>G&ouml;r en tidplan f&ouml;r arbetet </li>
<li>Avst&auml;m med j&auml;mna mellanrum med kunden s&aring; att du &auml;r p&aring; r&auml;tt sp&aring;r </li>
<li>Planera noga </li>
</ul>
<hr>
<p><a href="../INDEX.HTM" tppabs="http://www.users.wineasy.se/aki/">Tillbaka till Aki's Web</a> <img src="Pending_relink" tppabs="http://www.wineasy.se/cgi-bin/Count.cgi?sh=0|df=aki7.dat|ft=0|DD=C" align=bottom width=1 height=1> </p>
</body>

</html>
